# Run codegen using: npm run generate
# Make sure the schema endpoint is accessible! 
schema: https://query.joystream.org/graphql
documents:
  - >
    query openingById($openingId: ID!) {
      workingGroupOpeningByUniqueInput(where: {id: $openingId}) {
        metadata {
          applicationDetails
          description
          hiringLimit
          expectedEnding
          shortDescription
          title
        }
        id
        rewardPerBlock
        stakeAmount
        unstakingPeriod
      }
    }

  - >
    query workerById($workerId: ID!) {
      workerByUniqueInput(where: {id: $workerId}) {
        membership {
          ...MemberFields
        }
        status {
          __typename
        }
        rewardPerBlock
        stake
        rewardAccount
        roleAccount
        stakeAccount
      }
    }
    fragment MemberFields on Membership {
      handle
      id    
      controllerAccount
      rootAccount
      isCouncilMember
      roles {
        id
        groupId
        status {
          ... on WorkerStatusActive {
            __typename
          }
          ... on WorkerStatusLeaving {
            __typename
          }
          ... on WorkerStatusLeft {
            __typename
          }
          ... on WorkerStatusTerminated {
            __typename
          }
        }
        isLead
      }
    }

  - > 
    query applicationById($applicationId: ID!) {
      workingGroupApplicationByUniqueInput(where: {id: $applicationId}) {
        applicant {
          handle
        }
        openingId
      }
    }

  - >
    query memberById($memberId: ID!) {
      memberships(where: {id_eq: $memberId}) {
        ...MemberFields
      }
    }

  - > 
    query memberByHandle($handle: String) {
      memberships(where: {handle_eq: $handle}) {
        ...MemberFields
      }
    }

  - > 
    query activeCouncilMembers {
      electedCouncils(where: {endedAtBlock_eq: null}) {
        councilMembers {
          member {
            ...MemberFields
          }
        }
      }
    }

  - >
    query forumThreadById($threadId: ID!) {
      forumThreadByUniqueInput(where: {id: $threadId}) {
        id
        title
        author {
          ...MemberFields
        }
        category {
          id
          title
        }
      }
    }

  - >
    query postById($postId: ID!) {
      forumPostByUniqueInput(where: {id: $postId}) {
        id
        author {
          ...MemberFields
        }
        thread {
          title
          author {
            ...MemberFields
          }
          category {
            id
            title
          }
        }
      }
    }
generates:
  ./src/qntypes.ts:
    plugins:
      - typescript
      - typescript-operations
      - typescript-graphql-request