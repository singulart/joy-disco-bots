import { Inject, Injectable, Logger } from "@nestjs/common";
import { globalRetryConfig } from "config";
import { Sdk } from "src/qntypes";
import { Retryable } from 'typescript-retry-decorator';


/**
 * Decorator around the autogenerated `Sdk` that enables retry mechanism for Query Node calls
 */
@Injectable()
export class RetryableGraphQLClient {
  private readonly logger = new Logger(RetryableGraphQLClient.name);

  constructor(
    @Inject("JoystreamGqlSdk") private readonly sdk: Sdk,
  ) { }

  @Retryable(globalRetryConfig)
  async activeCouncilMembers() {
    this.logger.debug('Fetching CMs...');
    const cms = await this.sdk.activeCouncilMembers();
    if(!cms.electedCouncils || cms.electedCouncils.length === 0) {
      throw new Error();
    }
    return cms;
  }

  @Retryable(globalRetryConfig)
  async postById(id: string) {
    this.logger.debug(`Fetching post[${id}]...`);
    const post = await this.sdk.postById({postId: id});
    if(!post.forumPostByUniqueInput) {
      throw new Error();
    }
    return post;
  }

  @Retryable(globalRetryConfig)
  async forumThreadById(id: string) {
    this.logger.debug(`Fetching thread[${id}]...`);
    const thread = await this.sdk.forumThreadById({threadId: id});
    if(!thread.forumThreadByUniqueInput) {
      throw new Error();
    }
    return thread;
  }

  @Retryable(globalRetryConfig)
  async memberByHandle(handle: string) {
    this.logger.debug(`Fetching member[${handle}]...`);
    const member = await this.sdk.memberByHandle({handle: handle});
    if(!member.memberships || member.memberships.length === 0) {
      throw new Error();
    }
    return member;
  }

  @Retryable(globalRetryConfig)
  async applicationById(applicationId: string) {
    this.logger.debug(`Fetching application[${applicationId}]...`);
    const application = await this.sdk.applicationById({applicationId: applicationId});
    if(!application.workingGroupApplicationByUniqueInput) {
      throw new Error();
    }
    return application;
  }

  @Retryable(globalRetryConfig)
  async workerById(workerId: string) {
    this.logger.debug(`Fetching worker[${workerId}]...`);
    const worker = await this.sdk.workerById({workerId: workerId});
    if(!worker.workerByUniqueInput) {
      throw new Error();
    }
    return worker;
  }

  @Retryable(globalRetryConfig)
  async memberById(memberId: string) {
    this.logger.debug(`Fetching member[${memberId}]...`);
    const member = await this.sdk.memberById({memberId: memberId});
    if(!member.memberships || member.memberships.length === 0) {
      throw new Error();
    }
    return member;
  }

  @Retryable(globalRetryConfig)
  async openingById(openingId: string) {
    this.logger.debug(`Fetching opening[${openingId}]...`);
    const opening = await this.sdk.openingById({openingId: openingId});
    if(!opening.workingGroupOpeningByUniqueInput) {
      throw new Error();
    }
    return opening;
  }
}